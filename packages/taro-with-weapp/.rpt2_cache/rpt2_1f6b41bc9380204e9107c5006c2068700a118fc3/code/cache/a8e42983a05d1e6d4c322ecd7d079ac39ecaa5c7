{"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/utils.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,MAAM,UAAU,IAAI,CAAE,EAAE,CAAC,eAAe,EAAE,GAAG,CAAC,aAAa;IACzD,IAAI,CAAC,EAAE;QAAE,OAAO,KAAK,CAAA;IAErB,SAAS,OAAO,CAAE,CAAC;QACjB,MAAM,CAAC,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,CAAA;QACxC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAChF,CAAC;IAED,4BAA4B;IAC5B,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAA;IAC3B,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,OAAO,CAAE,IAAI,EAAE,IAAI;IACjC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;AACtD,CAAC;AAED,MAAM,UAAU,IAAI,CAAE,GAAG,CAAY;IACnC,EAAE;AACJ,CAAC;AAED,MAAM,wBAAwB,GAAG;IAC/B,UAAU,EAAE,IAAI;IAChB,YAAY,EAAE,IAAI;IAClB,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;CACV,CAAA;AAED,MAAM,UAAU,KAAK,CAAE,MAAM,EAAE,SAAiB,EAAE,GAAW;IAC3D,wBAAwB,CAAC,GAAG,GAAG,SAAS,WAAW;QACjD,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC,CAAA;IACD,wBAAwB,CAAC,GAAG,GAAG,SAAS,WAAW,CAAE,GAAG;QACtD,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;IAC5B,CAAC,CAAA;IACD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,wBAAwB,CAAC,CAAA;AAC9D,CAAC\"}","code":"/**\r\n * Simple bind, faster than native\r\n */\r\nexport function bind(fn /*: Function */, ctx /*: Object */) {\r\n    if (!fn)\r\n        return false;\r\n    function boundFn(a) {\r\n        const l /*: number */ = arguments.length;\r\n        return l ? (l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a)) : fn.call(ctx);\r\n    }\r\n    // record original fn length\r\n    boundFn._length = fn.length;\r\n    return boundFn;\r\n}\r\nexport function isEqual(obj1, obj2) {\r\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\r\n}\r\nexport function noop(..._) {\r\n    //\r\n}\r\nconst sharedPropertyDefinition = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: noop,\r\n    set: noop\r\n};\r\nexport function proxy(target, sourceKey, key) {\r\n    sharedPropertyDefinition.get = function proxyGetter() {\r\n        return this[sourceKey][key];\r\n    };\r\n    sharedPropertyDefinition.set = function proxySetter(val) {\r\n        this[sourceKey][key] = val;\r\n    };\r\n    Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\n//# sourceMappingURL=utils.js.map"}
